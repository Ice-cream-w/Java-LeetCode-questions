/*
给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。

子序列是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。
例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。

输入：nums = [10,9,2,5,3,7,101,18]
输出：4
解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。

输入：nums = [0,1,0,3,2,3]
输出：4

输入：nums = [7,7,7,7,7,7,7]
输出：1
 */

//动态规划
class Solution {
    public int lengthOfLIS(int[] nums) {
        //存放缓冲数组
        int[] dp = new int[nums.length];
        dp[0] = nums[0];
        //缓冲数组末尾值给情况1
        int j = 0;

        //遍历每一个数
        for (int i = 1 ; i < nums.length; i ++){
            //情况1：若该数比前一个数大，则加在后面
            if (nums[i] > dp[j])
                dp[++j] = nums[i];

            //情况2：若小，则替换数组中的值，即保持长度不变
            else {
                int k = 0;
                //可以加入二分查找缩短时间复杂度
                while (dp[k] < nums[i])
                    k++;
                dp[k] = nums[i];
            }
        }

        //j是数组下标，所以需要+1才是长度
        return j+1;
    }
}