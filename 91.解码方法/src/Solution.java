/*
一条包含字母A-Z 的消息通过以下映射进行了 编码 ：

'A' -> "1"
'B' -> "2"
...
'Z' -> "26"
要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。
例如，"11106" 可以映射为：
"AAJF" ，将消息分组为 (1 1 10 6)
"KJF" ，将消息分组为 (11 10 6)
注意，消息不能分组为 (1 11 06) ，因为 "06" 不能映射为 "F" ，这是由于 "6" 和 "06" 在映射中并不等价。

给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。
题目数据保证答案肯定是一个 32 位 的整数

输入：s = "12"
输出：2
解释：它可以解码为 "AB"（1 2）或者 "L"（12）。

输入：s = "226"  12121=8   ,1212 =5, 121=3, 12=2
输出：3
解释：它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。

输入：s = "0"  13612
输出：0
解释：没有字符映射到以 0 开头的数字。
含有 0 的有效映射是 'J' -> "10" 和 'T'-> "20" 。
由于没有字符，因此没有有效的方法对此进行解码，因为所有数字都需要映射。88888
 */

//动态规划
/*
如果连续的两位数符合条件，就相当于一个上楼梯的题目，可以有两种选法：
        1.一位数决定一个字母
        2.两位数决定一个字母
        就相当于dp(i+1) = dp[i] + dp[i-1];
    如果不符合条件，又有两种情况
        1.当前数字是0：
            不好意思，这阶楼梯不能单独走，
            dp[i+1] = dp[i-1]
        2.当前数字不是0
            不好意思，这阶楼梯太宽，走两步容易扯着步子，只能一个一个走
            dp[i+1] = dp[i];
 */
class Solution {
    public int numDecodings(String s) {
        //空或者前导0的
        if (s.length() == 0 || s.charAt(0) == 0)
            return 0;

        int[] dp = new int[s.length()+1];
        dp[0] = 1;
        for (int i = 0 ; i < s.length(); i ++){
            if (i < s.length() -2 && s.charAt(i) == '0' && s.charAt(i+1) == '0')
                return 0;

            dp[i+1] = dp[i];
            //此数为0，增加量0
            if (s.charAt(i) == '0')
                dp[i+1] = 0;

            //此数前一个为1,2，且此数能组合，并非纯粹斐波那契，而是斐波那契*斐波那契*...
            //每个组合的斐波那契值，遇到下一个组合的时候翻多倍
            if (i > 0 && (s.charAt(i-1) == '1' || (s.charAt(i-1) == '2' && s.charAt(i) <= '6'))){
                dp[i+1] += dp[i-1];
            }
        }

        return dp[s.length()];
    }
}
