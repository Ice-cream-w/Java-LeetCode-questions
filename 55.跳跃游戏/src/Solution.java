/*
给定一个非负整数数组 nums ，你最初位于数组的 第一个下标 。
数组中的每个元素代表你在该位置可以跳跃的最大长度。
判断你是否能够到达最后一个下标。

输入：nums = [2,3,1,1,4]
输出：true
解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。

输入：nums = [3,2,1,0,4]
输出：false
解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。
 */

//动态规划
class Solution {
    public boolean canJump(int[] nums) {
        //倒退一格
        int n = 1;

        //倒序遍历，往前跳，碰到0就往前走，并且要多跳一格
        for(int i=nums.length-2;i>=0;i--){
            if(nums[i] >= n){
                n = 1;
            }else{
                n++;
            }

            //终止条件，当第一个要跳的值不能越过0的时候报错
            if(i==0 && nums[i]<n)
                return false;
        }
        return true;
    }
}